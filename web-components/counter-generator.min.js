class CounterGenerator extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.elements={},this.eventHandlers=new Map,this.initialized=!1}async connectedCallback(){this.initialized||(await this.init(),this.initialized=!0)}disconnectedCallback(){this.destroy()}async init(){await this.render(),this.findElements(),this.bindEvents()}async render(){const e=this.getTemplate(),t=this.getStyles();this.shadowRoot.innerHTML=`\n      <style>${t}</style>\n      ${e}\n    `}getStyles(){return":host{box-sizing:border-box;display:block;font-family:Inter,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Arial,sans-serif;max-width:100%;width:100%}*{box-sizing:border-box}.counter-generator{--primary-color:#4483f5;--primary-hover:#3a70d1;--primary-light:rgba(68,131,245,.15);--primary-gradient:linear-gradient(90deg,#4483f5,#5e6ffd);--text-dark:#333;--text-medium:#555;--text-light:#777;--border-color:#ddd;--bg-light:#f8f9fa;--shadow-sm:0 2px 5px rgba(0,0,0,.05);--shadow-md:0 4px 12px rgba(0,0,0,.08);--radius-sm:6px;--radius-md:10px;--transition:all 0.2s ease;background:linear-gradient(180deg,#f8f9fa,#f0f3f7);border:1px solid rgba(0,0,0,.05);border-radius:var(--radius-md);box-shadow:var(--shadow-md);color:var(--text-dark);overflow:hidden}.counter-generator,.form-grid{max-width:100%;padding:15px;width:100%}.form-grid{background:#fff;border-radius:var(--radius-md);box-shadow:var(--shadow-sm);display:flex;flex-direction:column;gap:15px;margin-bottom:20px;max-height:calc(100vh - 348px);min-height:0;overflow:auto}.setting-group{flex-shrink:1;min-width:0;width:100%}.setting-group label{color:var(--text-dark);display:flex;font-size:14px;font-weight:500;margin-bottom:8px}.number-input,.select-styled,.text-input{background:#fff;border:1px solid var(--border-color);border-radius:var(--radius-sm);box-shadow:var(--shadow-sm);box-sizing:border-box;color:var(--text-dark);font-size:14px;max-width:100%;min-width:0;padding:8px 10px;transition:var(--transition);width:100%}.number-input:focus,.select-styled:focus,.text-input:focus{border-color:var(--primary-color);box-shadow:0 0 0 3px var(--primary-light);outline:none}.select-styled{appearance:none;background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3E%3Cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3E%3C/svg%3E\");background-position:right 8px center;background-repeat:no-repeat;background-size:16px;cursor:pointer;padding-right:32px}.checkbox-container{align-items:center;cursor:pointer;display:flex;gap:10px;margin:0}.checkbox-container input[type=checkbox]{cursor:pointer;flex-shrink:0;height:18px;margin:0;width:18px}.checkbox-option-label{color:var(--text-dark);cursor:pointer;font-size:14px;line-height:1.4}.helper-text{color:var(--text-light);font-size:13px;line-height:1.4;margin-top:5px}.required-indicator{color:#e74c3c}.section-title{border-bottom:2px solid var(--bg-light);color:var(--text-dark);font-size:16px;font-weight:600;padding-bottom:8px}.action-section{display:flex;justify-content:center;margin-top:20px}.generate-button{align-items:center;background:var(--primary-gradient);border:none;border-radius:var(--radius-sm);box-shadow:0 4px 12px rgba(68,131,245,.3);color:#fff;cursor:pointer;display:inline-flex;font-size:16px;font-weight:500;gap:8px;justify-content:center;padding:12px 24px;transition:var(--transition)}.generate-button:hover{box-shadow:0 6px 16px rgba(68,131,245,.4);transform:translateY(-2px)}.generate-button:active{box-shadow:0 2px 8px rgba(68,131,245,.3);transform:translateY(0)}.conditional-field{margin-top:10px;transition:all .3s ease}.conditional-field.hidden{display:none}"}getTemplate(){return'<div class="counter-generator"><div class="form-grid"><div class="section-title">1. Целевой элемент и значения</div><div class="setting-group"><label for="target-class">CSS-класс целевого элемента<span class="required-indicator">*</span></label><input id="target-class" class="text-input" placeholder="Например: my-counter" required><div class="helper-text">Класс элемента, где будет счетчик</div></div><div class="setting-group"><label for="start-value">Начальное значение</label><input type="number" id="start-value" class="number-input" value="0"><div class="helper-text">Число, с которого начнется анимация</div></div><div class="setting-group"><label for="end-value">Конечное значение<span class="required-indicator">*</span></label><input type="number" id="end-value" class="number-input" value="1000" required><div class="helper-text">Число, на котором анимация остановится</div></div><div class="section-title">2. Анимация</div><div class="setting-group"><label for="duration">Длительность анимации (мс)</label><input type="number" id="duration" class="number-input" value="2000" min="100" step="100"><div class="helper-text">Время в миллисекундах. 1000мс = 1 секунда</div></div><div class="setting-group"><label for="delay">Задержка перед стартом (мс)</label><input type="number" id="delay" class="number-input" value="0" min="0" step="100"><div class="helper-text">Пауза перед началом анимации в миллисекундах</div></div><div class="setting-group"><label for="easing">Функция плавности</label><select id="easing" class="select-styled"><option value="easeOutQuad" selected>Ease Out Quad (стандарт)</option><option value="linear">Linear</option><option value="easeInQuad">Ease In Quad</option><option value="easeInOutQuad">Ease In Out Quad</option><option value="easeInCubic">Ease In Cubic</option><option value="easeOutCubic">Ease Out Cubic</option><option value="easeInOutCubic">Ease In Out Cubic</option><option value="easeInQuart">Ease In Quart</option><option value="easeOutQuart">Ease Out Quart</option><option value="easeInOutQuart">Ease In Out Quart</option><option value="easeInQuint">Ease In Quint</option><option value="easeOutQuint">Ease Out Quint</option><option value="easeInOutQuint">Ease In Out Quint</option><option value="easeInSine">Ease In Sine</option><option value="easeOutSine">Ease Out Sine</option><option value="easeInOutSine">Ease In Out Sine</option><option value="easeInExpo">Ease In Expo</option><option value="easeOutExpo">Ease Out Expo</option><option value="easeInOutExpo">Ease In Out Expo</option><option value="easeInCirc">Ease In Circ</option><option value="easeOutCirc">Ease Out Circ</option><option value="easeInOutCirc">Ease In Out Circ</option></select><div class="helper-text">Определяет характер ускорения/замедления анимации. Недоступно при эффекте одометра</div></div><div class="section-title">3. Форматирование и отображение</div><div class="setting-group"><label for="prefix">Текстовый префикс</label><input id="prefix" class="text-input" placeholder="Например: $ или +"><div class="helper-text">Текст, отображаемый перед числом</div></div><div class="setting-group"><label for="suffix">Текстовый суффикс</label><input id="suffix" class="text-input" placeholder="Например: + или %"><div class="helper-text">Текст, отображаемый после числа</div></div><div class="setting-group"><label for="decimals">Количество десятичных знаков</label><input type="number" id="decimals" class="number-input" value="0" min="0" max="5" step="1"><div class="helper-text">Сколько знаков показывать после точки (0-5)</div></div><div class="setting-group"><label class="checkbox-container"><input type="checkbox" id="use-separator"><span class="checkbox-option-label">Использовать разделитель тысяч</span></label><div class="helper-text">Разделяет группы разрядов для лучшей читаемости</div></div><div class="setting-group conditional-field hidden" id="separator-field"><label for="separator-symbol">Символ разделителя тысяч</label><select id="separator-symbol" class="select-styled"><option value="," selected>Запятая (,)</option><option value=" ">Пробел ( )</option><option value=".">Точка (.)</option></select><div class="helper-text">Выберите символ для разделения</div></div><div class="section-title">4. Поведение</div><div class="setting-group"><label class="checkbox-container"><input type="checkbox" id="play-on-view" checked><span class="checkbox-option-label">Запуск при появлении в области видимости</span></label><div class="helper-text">Анимация начнется, когда счетчик станет виден на экране</div></div><div class="setting-group"><label class="checkbox-container"><input type="checkbox" id="loop"><span class="checkbox-option-label">Повторять анимацию (циклично)</span></label><div class="helper-text">Анимация будет бесконечно повторяться</div></div><div class="setting-group"><label class="checkbox-container"><input type="checkbox" id="odometer-effect"><span class="checkbox-option-label">Эффект "Одометра" (прокрутка цифр)</span></label><div class="helper-text">Создает эффект перелистывания отдельных цифр</div></div></div><div class="action-section"><button class="generate-button" id="generate-btn"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><path d="M16 18l6-6-6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M8 6l-6 6 6 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg><span>Сгенерировать код</span></button></div></div>'}findElements(){this.elements.generateBtn=this.shadowRoot.getElementById("generate-btn"),this.elements.codeOutput=this.shadowRoot.getElementById("code-output"),this.elements.targetClass=this.shadowRoot.getElementById("target-class"),this.elements.startValue=this.shadowRoot.getElementById("start-value"),this.elements.endValue=this.shadowRoot.getElementById("end-value"),this.elements.duration=this.shadowRoot.getElementById("duration"),this.elements.delay=this.shadowRoot.getElementById("delay"),this.elements.easing=this.shadowRoot.getElementById("easing"),this.elements.prefix=this.shadowRoot.getElementById("prefix"),this.elements.suffix=this.shadowRoot.getElementById("suffix"),this.elements.decimals=this.shadowRoot.getElementById("decimals"),this.elements.useSeparator=this.shadowRoot.getElementById("use-separator"),this.elements.separatorSymbol=this.shadowRoot.getElementById("separator-symbol"),this.elements.playOnView=this.shadowRoot.getElementById("play-on-view"),this.elements.loop=this.shadowRoot.getElementById("loop"),this.elements.odometerEffect=this.shadowRoot.getElementById("odometer-effect"),this.elements.separatorField=this.shadowRoot.getElementById("separator-field"),this.elements.successPopup=document.querySelector(".pop-up-success"),this.elements.popupAcceptBtn=document.querySelector("[data-popup-accept-btn]"),this.elements.popupCloseBtn=document.querySelector("[data-popup-close-btn]")}bindEvents(){if(this.elements.generateBtn){const e=()=>this.generateCode();this.eventHandlers.set("generate",e),this.elements.generateBtn.addEventListener("click",e)}if(this.elements.useSeparator){const e=()=>this.toggleSeparatorField();this.eventHandlers.set("separator-toggle",e),this.elements.useSeparator.addEventListener("change",e)}if(this.elements.odometerEffect){const e=()=>this.toggleEasingField();this.eventHandlers.set("odometer-toggle",e),this.elements.odometerEffect.addEventListener("change",e)}this.bindModalEvents()}bindModalEvents(){if(this.elements.popupAcceptBtn){const e=()=>this.hideSuccessPopup();this.eventHandlers.set("popup-accept",e),this.elements.popupAcceptBtn.addEventListener("click",e)}if(this.elements.popupCloseBtn){const e=()=>this.hideSuccessPopup();this.eventHandlers.set("popup-close",e),this.elements.popupCloseBtn.addEventListener("click",e)}if(this.elements.successPopup){const e=e=>{e.target===this.elements.successPopup&&this.hideSuccessPopup()};this.eventHandlers.set("popup-overlay",e),this.elements.successPopup.addEventListener("click",e)}}toggleSeparatorField(){this.elements.useSeparator.checked?this.elements.separatorField.classList.remove("hidden"):this.elements.separatorField.classList.add("hidden")}toggleEasingField(){this.elements.odometerEffect.checked?(this.elements.easing.disabled=!0,this.elements.easing.style.opacity="0.5"):(this.elements.easing.disabled=!1,this.elements.easing.style.opacity="1")}collectData(){const e=this.elements.targetClass.value.trim(),t=parseFloat(this.elements.endValue.value);if(!e)return alert("Пожалуйста, укажите CSS-класс целевого элемента"),null;if(isNaN(t))return alert("Пожалуйста, укажите корректное конечное значение"),null;const n=parseInt(this.elements.duration.value)||2e3;return n<100?(alert("Длительность анимации должна быть не менее 100 мс"),null):{targetClass:e,startValue:parseFloat(this.elements.startValue.value)||0,endValue:t,duration:n,delay:parseInt(this.elements.delay.value)||0,easing:this.elements.easing.value||"easeOutQuad",prefix:this.elements.prefix.value||"",suffix:this.elements.suffix.value||"",decimals:parseInt(this.elements.decimals.value)||0,useThousandsSeparator:this.elements.useSeparator.checked,thousandsSeparator:this.elements.separatorSymbol.value||",",playOnView:this.elements.playOnView.checked,loop:this.elements.loop.checked,odometerEffect:this.elements.odometerEffect.checked}}async generateCode(){try{const e=this.collectData();if(!e)return;const t=this.generateCounterCode(e),n=await this.minifyGeneratedCode(t);this.elements.codeOutput&&(this.elements.codeOutput.textContent=n),await this.copyToClipboard(n),this.showSuccessPopup()}catch(e){console.error("Ошибка генерации кода:",e)}}async minifyGeneratedCode(e){try{const t=this.parseGeneratedCode(e),n=t.css?this.minifyCSS(t.css):"",s=t.js?this.minifyJS(t.js):"",a=t.html?this.minifyHTML(t.html):"";let i="";return n&&(i+=`<style>${n}</style>`),s&&(i+=`<script>${s}<\/script>`),a&&(i+=a),i}catch(t){return console.warn("Минификация генерируемого кода не удалась, используем оригинал:",t),e}}parseGeneratedCode(e){const t={css:"",js:"",html:""},n=/<style[^>]*>([\s\S]*?)<\/style>/gi;let s;for(;null!==(s=n.exec(e));)t.css+=s[1];const a=/<script[^>]*>([\s\S]*?)<\/script>/gi;for(;null!==(s=a.exec(e));)t.js+=s[1];return t.html=e.replace(/<style[^>]*>[\s\S]*?<\/style>/gi,"").replace(/<script[^>]*>[\s\S]*?<\/script>/gi,"").trim(),t}minifyCSS(e){return e.replace(/\/\*[\s\S]*?\*\//g,"").replace(/\s+/g," ").replace(/\s*([{}:;,>+~])\s*/g,"$1").replace(/;}/g,"}").replace(/\s*\(\s*/g,"(").replace(/\s*\)\s*/g,")").replace(/#([a-f0-9])\1([a-f0-9])\2([a-f0-9])\3/gi,"#$1$2$3").trim()}minifyHTML(e){return e?e.replace(/<!--[\s\S]*?-->/g,"").replace(/>\s+</g,"><").replace(/\s+/g," ").trim():""}minifyJS(e){let t=e;return t=this.removeJSComments(t),t=t.replace(/const\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s*=\s*/g,"const $1=").replace(/let\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s*=\s*/g,"let $1=").replace(/var\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s*=\s*/g,"var $1="),t=t.replace(/\[\s*([0-9,\s.]+)\s*\]/g,(e,t)=>`[${t.replace(/\s*,\s*/g,",").replace(/\s+/g,"")}]`),t=t.replace(/\s*(=|\+=|-=|\*=|\/=|%=|==|===|!=|!==)\s*/g,"$1").replace(/\s*([<>&|])\s*/g,"$1").replace(/\s*([(){}[\];,])\s*/g,"$1").replace(/\s*([:?])\s*/g,"$1"),t=t.replace(/\s*\n\s*/g,"\n").replace(/\n+/g,"\n").replace(/\b(if|for|while|switch|catch|function|return|throw|new|typeof)\s+/g,"$1 ").replace(/\belse\s+/g,"else ").trim(),t}removeJSComments(e){let t="",n=!1,s="",a=!1,i=!1;for(let o=0;o<e.length;o++){const r=e[o],l=e[o+1]||"";if(!a&&!i){if(!(n||'"'!==r&&"'"!==r&&"`"!==r)){n=!0,s=r,t+=r;continue}if(n&&r===s&&"\\"!==e[o-1]){n=!1,t+=r;continue}if(n){t+=r;continue}}if(!n){if(!a&&!i&&"/"===r&&"*"===l){a=!0,o++;continue}if(a&&"*"===r&&"/"===l){a=!1,o++;continue}if(!a&&!i&&"/"===r&&"/"===l){i=!0,o++;continue}if(i&&("\n"===r||"\r"===r)){i=!1,t+=r;continue}}a||i||(t+=r)}return t}generateCounterCode(e){const t=e.odometerEffect;let n="";return t&&(n="\n// Динамическая загрузка number-flip библиотеки\nasync function loadNumberFlipLibrary(callback) {\n  if (typeof window.Flip === 'function') {\n    callback(); \n    return;\n  }\n\n  try {\n    const mod = await import('https://cdn.jsdelivr.net/npm/number-flip@1.2.3/+esm');\n    window.Flip = window.Flip || mod.Flip || mod.default;\n\n    if (typeof window.Flip !== 'function') {\n      console.warn('Taptop Counter: number-flip загружен, но Flip не найден – будет простой счётчик.');\n    }\n  } catch (err) {\n    console.error('Taptop Counter: ошибка загрузки number-flip →', err);\n  }\n\n  callback();\n}"),`\x3c!-- Расширение - Анимированный счетчик --\x3e\n<script>\n${t?`${n}\n\nloadNumberFlipLibrary(() => {`:'document.addEventListener("DOMContentLoaded", () => {'}\n// Настройки счетчика\nconst counterConfig = {\n  targetClass: "${e.targetClass}",\n  startValue: ${e.startValue},\n  endValue: ${e.endValue},\n  duration: ${e.duration},\n  delay: ${e.delay},\n  easing: "${e.easing}",\n  prefix: "${e.prefix}",\n  suffix: "${e.suffix}",\n  decimals: ${e.decimals},\n  useThousandsSeparator: ${e.useThousandsSeparator},\n  thousandsSeparator: "${e.thousandsSeparator}",\n  playOnView: ${e.playOnView},\n  loop: ${e.loop},\n  odometerEffect: ${e.odometerEffect}\n};\n\n// Функции плавности\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => (--t) * t * t + 1,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - (--t) * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + (--t) * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t,\n  easeInSine: t => 1 - Math.cos(t * Math.PI / 2),\n  easeOutSine: t => Math.sin(t * Math.PI / 2),\n  easeInOutSine: t => -(Math.cos(Math.PI * t) - 1) / 2,\n  easeInExpo: t => t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n  easeOutExpo: t => t === 1 ? 1 : 1 - Math.pow(2, -10 * t),\n  easeInOutExpo: t => t === 0 ? 0 : t === 1 ? 1 : t < 0.5 ? Math.pow(2, 20 * t - 10) / 2 : (2 - Math.pow(2, -20 * t + 10)) / 2,\n  easeInCirc: t => 1 - Math.sqrt(1 - t * t),\n  easeOutCirc: t => Math.sqrt(1 - (t - 1) * (t - 1)),\n  easeInOutCirc: t => t < 0.5 ? (1 - Math.sqrt(1 - 4 * t * t)) / 2 : (Math.sqrt(1 - (-2 * t + 2) * (-2 * t + 2)) + 1) / 2\n};\n\n// Форматирование числа\nfunction formatNumber(num, config) {\n  let formatted = num.toFixed(config.decimals);\n  \n  if (config.useThousandsSeparator && !config.odometerEffect) {\n    const parts = formatted.split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, config.thousandsSeparator);\n    formatted = parts.join('.');\n  }\n  \n  return config.prefix + formatted + config.suffix;\n}\n\n// Обсервер пересечений для запуска при появлении\nconst observerOptions = {\n  threshold: 0.1,\n  rootMargin: '0px 0px -50px 0px'\n};\n\n// Анимация счетчика\nfunction animateCounter(element, config) {\n  if (config.odometerEffect) {\n    animateOdometer(element, config);\n  } else {\n    animateRegularCounter(element, config);\n  }\n}\n\n// Обычная анимация счетчика\nfunction animateRegularCounter(element, config) {\n  const startTime = performance.now();\n  const easingFn = easingFunctions[config.easing] || easingFunctions.easeOutQuad;\n  \n  function update() {\n    const elapsed = performance.now() - startTime;\n    const progress = Math.min(elapsed / config.duration, 1);\n    const easedProgress = easingFn(progress);\n    const currentValue = config.startValue + (config.endValue - config.startValue) * easedProgress;\n    \n    element.textContent = formatNumber(currentValue, config);\n    \n    if (progress < 1) {\n      requestAnimationFrame(update);\n    } else if (config.loop) {\n      setTimeout(() => animateCounter(element, config), 500);\n    }\n  }\n  \n  setTimeout(() => requestAnimationFrame(update), config.delay);\n}\n\n// Анимация одометра\nfunction animateOdometer(element, config) {\n  element.innerHTML = '';\n\n  /* ---------- prefix ---------- */\n  if (config.prefix) {\n    const prefixSpan = document.createElement('span');\n    prefixSpan.className = 'taptop-counter-prefix';\n    prefixSpan.textContent = config.prefix;\n    element.appendChild(prefixSpan);\n  }\n\n  /* ---------- основной узел одометра ---------- */\n  const integerPartNode = document.createElement('span');\n  integerPartNode.className = 'taptop-odometer-integer-part';\n  element.appendChild(integerPartNode);\n\n  /* ---------- подготовка чисел ---------- */\n  const [startIntStr, startDecStr = ''] = String(config.startValue).split('.');\n  const [endIntStr] = String(config.endValue).split('.');\n  const startInt = parseInt(startIntStr, 10) || 0;\n  const endInt = parseInt(endIntStr, 10) || 0;\n\n  /* ---------- разделитель тысяч ---------- */\n  const separatorChar = config.useThousandsSeparator\n        ? (config.thousandsSeparator === ' ' ? ' ' : config.thousandsSeparator)\n        : undefined;\n\n  let flipInstance = null;\n  let decimalDisplayElement = null;\n\n  try {\n    if (typeof window.Flip === 'function') {\n      flipInstance = new window.Flip({\n        node: integerPartNode,\n        from: startInt,\n        to: endInt,\n        duration: (config.duration || 2000) / 1000,\n        delay: (config.delay || 0) / 1000,\n        direct: false,\n        separator: separatorChar,\n        separateEvery: config.useThousandsSeparator ? 3 : undefined,\n      });\n    } else {\n      console.warn('Taptop Counter (' + config.targetClass + '): number-flip library not loaded. Falling back to simple counter.');\n      // Fallback to simple counter\n      animateRegularCounter(element, config);\n      return;\n    }\n  } catch (e) {\n    console.error('Error initializing Flip for ' + config.targetClass + ':', e, config);\n    // Fallback to simple counter\n    animateRegularCounter(element, config);\n    return;\n  }\n\n  /* ---------- дробная часть ---------- */\n  if (config.decimals > 0) {\n    decimalDisplayElement = document.createElement('span');\n    decimalDisplayElement.className = 'taptop-odometer-decimal-part';\n    const decimalValue = startDecStr\n      ? ('.' + startDecStr.padEnd(config.decimals, '0').slice(0, config.decimals))\n      : ('.' + '0'.repeat(config.decimals));\n    decimalDisplayElement.textContent = decimalValue;\n    element.appendChild(decimalDisplayElement);\n  }\n\n  /* ---------- suffix ---------- */\n  if (config.suffix) {\n    const suffixSpan = document.createElement('span');\n    suffixSpan.className = 'taptop-counter-suffix';\n    suffixSpan.textContent = config.suffix;\n    element.appendChild(suffixSpan);\n  }\n\n  // Start animation\n  function startOdometer() {\n    if (!flipInstance) return;\n    \n    const [targetIntegerPartStr] = String(config.endValue).split('.');\n    const targetIntegerEndValue = parseInt(targetIntegerPartStr, 10) || 0;\n\n    flipInstance.flipTo({ to: targetIntegerEndValue });\n\n    // Handle decimal part animation if needed\n    if (decimalDisplayElement && config.decimals > 0) {\n      const [, endDecStr = ''] = String(config.endValue).split('.');\n      const targetDecimalValue = endDecStr\n        ? ('.' + endDecStr.padEnd(config.decimals, '0').slice(0, config.decimals))\n        : ('.' + '0'.repeat(config.decimals));\n      \n      // Animate decimal part separately\n      setTimeout(() => {\n        if (decimalDisplayElement) {\n          decimalDisplayElement.textContent = targetDecimalValue;\n        }\n      }, config.duration * 0.8); // Start decimal animation near the end\n    }\n\n    if (config.loop) {\n      const loopDelay = (config.duration || 0) + (config.delay || 0) + 500;\n      setTimeout(() => {\n        if (element.parentNode) {\n          const [currentIntegerStart] = String(config.startValue).split('.');\n          flipInstance.flipTo({ to: parseInt(currentIntegerStart, 10) || 0, duration: 0.01 });\n          \n          // Reset decimal part for loop\n          if (decimalDisplayElement && config.decimals > 0) {\n            const startDecimalValue = startDecStr\n              ? ('.' + startDecStr.padEnd(config.decimals, '0').slice(0, config.decimals))\n              : ('.' + '0'.repeat(config.decimals));\n            decimalDisplayElement.textContent = startDecimalValue;\n          }\n          \n          setTimeout(() => startOdometer(), config.delay || 50);\n        }\n      }, loopDelay);\n    }\n  }\n\n  // Add styles if not already present\n  const styleId = 'taptop-counter-odometer-styles';\n  if (!document.getElementById(styleId)) {\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.textContent = \n      '.taptop-counter-prefix,' +\n      '.taptop-counter-suffix {' +\n        'display: inline-block;' +\n        'margin: 0 0.2em;' +\n      '}' +\n      '.taptop-odometer-decimal-part {' +\n        'display: inline-block;' +\n        'margin: 0;' +\n      '}' +\n      '.taptop-odometer-integer-part {' +\n        'display: inline-block;' +\n        'vertical-align: baseline;' +\n      '}' +\n      '.taptop-odometer-integer-part .ctnr {' +\n        'display: inline-block;' +\n        'font: inherit;' +\n        'line-height: inherit;' +\n        'overflow: hidden;' +\n        'vertical-align: top;' +\n        'user-select: none;' +\n      '}' +\n      '.taptop-odometer-integer-part .digit {' +\n        'display: block;' +\n        'font: inherit;' +\n        'line-height: inherit;' +\n        'text-align: center;' +\n        'user-select: none;' +\n      '}' +\n      '.taptop-odometer-integer-part .sprtr {' +\n        'display: inline-block;' +\n        'white-space: pre;' +\n      '}';\n    document.head.appendChild(style);\n  }\n\n  setTimeout(() => startOdometer(), config.delay || 0);\n}\n\n// Инициализация счетчика\nfunction initCounter() {\n  const elements = document.querySelectorAll('.' + counterConfig.targetClass);\n  \n  elements.forEach(element => {\n    if (counterConfig.playOnView) {\n      const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            animateCounter(entry.target, counterConfig);\n            if (!counterConfig.loop) {\n              observer.unobserve(entry.target);\n            }\n          }\n        });\n      }, observerOptions);\n      \n      observer.observe(element);\n    } else {\n      animateCounter(element, counterConfig);\n    }\n  });\n}\n\n// Запуск\n${t?'document.addEventListener("DOMContentLoaded", initCounter);':"initCounter();"}\n});\n<\/script>`}async copyToClipboard(e){try{await navigator.clipboard.writeText(e),console.log("Код скопирован в буфер обмена")}catch(t){this.fallbackCopy(e)}}fallbackCopy(e){const t=document.createElement("textarea");t.value=e,t.style.position="fixed",t.style.left="-9999px",document.body.appendChild(t);try{if(t.select(),!document.execCommand("copy"))throw new Error("Не удалось скопировать код в буфер обмена");console.log("Код скопирован в буфер обмена (fallback)")}finally{document.body.removeChild(t)}}showSuccessPopup(){this.elements.successPopup&&(this.elements.successPopup.style.display="flex")}hideSuccessPopup(){this.elements.successPopup&&(this.elements.successPopup.style.display="none")}unbindEvents(){this.elements.generateBtn&&this.eventHandlers.has("generate")&&this.elements.generateBtn.removeEventListener("click",this.eventHandlers.get("generate")),this.elements.useSeparator&&this.eventHandlers.has("separator-toggle")&&this.elements.useSeparator.removeEventListener("change",this.eventHandlers.get("separator-toggle")),this.elements.odometerEffect&&this.eventHandlers.has("odometer-toggle")&&this.elements.odometerEffect.removeEventListener("change",this.eventHandlers.get("odometer-toggle")),this.unbindModalEvents(),this.eventHandlers.clear()}unbindModalEvents(){this.elements.popupAcceptBtn&&this.eventHandlers.has("popup-accept")&&this.elements.popupAcceptBtn.removeEventListener("click",this.eventHandlers.get("popup-accept")),this.elements.popupCloseBtn&&this.eventHandlers.has("popup-close")&&this.elements.popupCloseBtn.removeEventListener("click",this.eventHandlers.get("popup-close")),this.elements.successPopup&&this.eventHandlers.has("popup-overlay")&&this.elements.successPopup.removeEventListener("click",this.eventHandlers.get("popup-overlay"))}destroy(){this.unbindEvents(),this.initialized=!1}}customElements.define("counter-generator",CounterGenerator);
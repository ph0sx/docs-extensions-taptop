class CountdownTimerGenerator extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.elements={},this.eventHandlers=new Map,this.initialized=!1,this.configDefaults={timerType:"fixed",endDate:"",endTime:"00:00:00",timezone:"auto",durationDays:0,durationHours:1,durationMinutes:0,durationSeconds:0,displayClass:"",hideClasses:"",showClasses:"",hideTimerOnEnd:!1,completionText:"",redirectPath:"",storageKey:"taptopTimerEnd_"}}async connectedCallback(){this.initialized||(await this.init(),this.initialized=!0)}disconnectedCallback(){this.destroy()}async init(){await this.render(),this.findElements(),this.bindEvents(),this.setInitialState()}async render(){const e=this.getTemplate(),t=this.getStyles();this.shadowRoot.innerHTML=`\n      <style>${t}</style>\n      ${e}\n    `}parseCommaList(e){return e?e.split(",").map(e=>e.trim()).filter(Boolean):[]}getStyles(){return':host{box-sizing:border-box;display:block;font-family:Inter,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Arial,sans-serif;max-width:100%;width:100%}*{box-sizing:border-box}.countdown-timer-generator{--primary-color:#4483f5;--primary-light:rgba(68,131,245,.15);--primary-gradient:linear-gradient(90deg,#4483f5,#5e6ffd);--text-dark:#333;--text-light:#777;--border-color:#ddd;--bg-light:#f8f9fa;--shadow-sm:0 2px 5px rgba(0,0,0,.05);--shadow-md:0 4px 12px rgba(0,0,0,.08);--radius-sm:6px;--radius-md:10px;--transition:all 0.2s ease;background:linear-gradient(180deg,#f8f9fa,#f0f3f7);border:1px solid rgba(0,0,0,.05);border-radius:var(--radius-md);box-shadow:var(--shadow-md);color:var(--text-dark);min-width:350px;padding:15px;width:100%}.form-grid{background:#fff;border-radius:var(--radius-md);box-shadow:var(--shadow-sm);margin-bottom:20px;max-height:calc(100vh - 348px);overflow:auto;padding:15px;width:100%}.form-grid,.setting-group{display:flex;flex-direction:column;gap:15px}.setting-group label{align-items:center;color:var(--text-dark);display:flex;font-size:14px;font-weight:500}.number-input,.select-styled,.text-input{background:#fff;border:1px solid var(--border-color);border-radius:var(--radius-sm);box-shadow:var(--shadow-sm);color:var(--text-dark);font-size:14px;padding:8px 10px;transition:var(--transition);width:100%}.number-input:focus,.select-styled:focus,.text-input:focus{border-color:var(--primary-color);box-shadow:0 0 0 3px var(--primary-light);outline:none}.select-styled{appearance:none;background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'none\' viewBox=\'0 0 20 20\'%3E%3Cpath stroke=\'%236b7280\' stroke-linecap=\'round\' stroke-linejoin=\'round\' stroke-width=\'1.5\' d=\'m6 8 4 4 4-4\'/%3E%3C/svg%3E");background-position:right 8px center;background-repeat:no-repeat;background-size:16px;cursor:pointer;padding-right:32px}.helper-text,p.helper-text{color:var(--text-light);font-size:13px;line-height:1.4;margin:-5px 0 0}.helper-text:not(:last-child),p.helper-text:not(:last-child){margin-bottom:15px}.required-indicator{color:#e74c3c}fieldset{border:none;margin:0;padding:0}legend{border-bottom:2px solid var(--bg-light);color:var(--text-dark);font-size:16px;font-weight:600;margin-bottom:15px;padding-bottom:8px;width:100%}.action-section{display:flex;justify-content:center;margin-top:20px}.generate-button{align-items:center;background:var(--primary-gradient);border:none;border-radius:var(--radius-sm);box-shadow:0 4px 12px rgba(68,131,245,.3);color:#fff;cursor:pointer;display:inline-flex;font-size:16px;font-weight:500;gap:8px;justify-content:center;padding:12px 24px;transition:var(--transition)}.generate-button:hover{box-shadow:0 6px 16px rgba(68,131,245,.4);transform:translateY(-2px)}.generate-button:active{box-shadow:0 2px 8px rgba(68,131,245,.3);transform:translateY(0)}.checkbox-container{align-items:center;cursor:pointer;display:flex;gap:10px;margin:0}.checkbox-container input[type=checkbox]{cursor:pointer;flex-shrink:0;height:18px;margin:0;width:18px}.checkbox-option-label{color:var(--text-dark);cursor:pointer;font-size:14px;line-height:1.4}.radio-group{display:flex;flex-direction:column;gap:15px}.radio-container{align-items:center;color:var(--text-dark);cursor:pointer;display:inline-flex;font-size:14px;margin-bottom:5px;padding-left:30px;position:relative;user-select:none}.radio-container input[type=radio]{cursor:pointer;height:0;opacity:0;position:absolute;width:0}.radio-checkmark{background-color:#f0f0f0;border:1px solid #ccc;border-radius:50%;box-shadow:inset 0 1px 2px rgba(0,0,0,.1);height:20px;left:0;position:absolute;transition:all .2s ease;width:20px}.radio-container:hover input[type=radio]~.radio-checkmark{background-color:#e0e0e0;border-color:#bbb}.radio-container input[type=radio]:checked~.radio-checkmark{background-color:var(--primary-color);border-color:var(--primary-color);box-shadow:none}.radio-checkmark:after{background:#fff;border-radius:50%;content:"";display:none;height:8px;left:5px;position:absolute;top:5px;width:8px}.radio-container input[type=radio]:checked~.radio-checkmark:after{display:block}.time-settings-group{background-color:rgba(248,249,250,.5);border:1px dashed var(--border-color);border-radius:var(--radius-sm);padding:15px}.time-settings-group.hidden{display:none}.duration-row{display:flex;flex-wrap:wrap;gap:15px}.settings-column{display:flex;flex-direction:column;gap:15px}.duration-row .setting-group{flex:1;gap:10px;min-width:80px}.icon-eye-off{background-image:url(\'data:image/svg+xml;utf8,<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><g fill="none" stroke="%23000000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10" fill="%23F0F0F0" stroke="%23D1D5DB"/><path d="M4 12s2.5-5 8-5 8 5 8 5-2.5 5-8 5-8-5-8-5z" /><circle cx="12" cy="12" r="3" /><line x1="3" y1="3" x2="21" y2="21" stroke="%23000000" stroke-width="1.8" /></g></svg>\');background-repeat:no-repeat;background-size:contain;display:inline-block;height:16px;vertical-align:middle;width:16px}'}getTemplate(){return'<form class="countdown-timer-generator"><div class="form-grid"><fieldset><legend>1. Тип таймера</legend><div class="setting-group"><div class="radio-group"><label class="radio-container"><input type="radio" name="timerType" value="fixed" checked><span class="radio-checkmark"></span>До конкретной даты и времени</label><label class="radio-container"><input type="radio" name="timerType" value="evergreen"><span class="radio-checkmark"></span>Для каждого посетителя (Вечнозеленый)</label></div><div class="helper-text">Выберите, будет ли таймер отсчитывать до одной фиксированной даты для всех, или будет запускаться индивидуально для каждого посетителя.</div></div></fieldset><fieldset><legend>2. Настройки времени</legend><div class="time-settings-group" id="fixed-date-settings"><p class="helper-text">Таймер будет отсчитывать время до указанной даты и времени по выбранному часовому поясу.</p><div class="settings-column"><div class="setting-group"><label for="timer-end-date">Дата окончания:</label><input type="date" id="timer-end-date" class="text-input"></div><div class="setting-group"><label for="timer-end-time">Время окончания (с секундами):</label><input type="time" id="timer-end-time" class="text-input" step="1" value="00:00:00"></div><div class="setting-group"><label for="timer-timezone">Часовой пояс:</label><select class="select-styled" id="timer-timezone" name="timezone"><option value="auto" selected>Автоматически (часовой пояс посетителя)</option><optgroup label="Россия и ближнее зарубежье"><option value="2">UTC+2 (Калининград)</option><option value="3">UTC+3 (Москва)</option><option value="4">UTC+4 (Самара)</option><option value="5">UTC+5 (Екатеринбург)</option><option value="6">UTC+6 (Омск)</option><option value="7">UTC+7 (Красноярск)</option><option value="8">UTC+8 (Иркутск)</option><option value="9">UTC+9 (Якутск)</option><option value="10">UTC+10 (Владивосток)</option><option value="11">UTC+11 (Магадан)</option><option value="12">UTC+12 (Камчатка)</option></optgroup><optgroup label="Западное полушарие"><option value="-12">UTC-12</option><option value="-11">UTC-11</option><option value="-10">UTC-10</option><option value="-9">UTC-9</option><option value="-8">UTC-8</option><option value="-7">UTC-7</option><option value="-6">UTC-6</option><option value="-5">UTC-5</option><option value="-4">UTC-4</option><option value="-3">UTC-3</option><option value="-2">UTC-2</option><option value="-1">UTC-1</option></optgroup><optgroup label="Центральный регион"><option value="0">UTC+0 (Лондон)</option><option value="1">UTC+1 (Берлин)</option></optgroup><optgroup label="Азия и Океания"><option value="4">UTC+4</option><option value="5.5">UTC+5:30</option><option value="8">UTC+8</option><option value="9">UTC+9</option><option value="9.5">UTC+9:30</option><option value="10">UTC+10</option><option value="12">UTC+12</option><option value="13">UTC+13</option></optgroup></select><div class="helper-text">Убедитесь, что дата/время установлены по выбранному часовому поясу.</div></div></div></div><div class="time-settings-group hidden" id="evergreen-settings"><p class="helper-text">Укажите длительность таймера. Он будет запущен индивидуально для каждого посетителя при первом заходе на страницу.</p><div class="duration-row"><div class="setting-group"><label for="timer-duration-days">Дни:</label><input type="number" id="timer-duration-days" class="number-input" value="0" min="0"></div><div class="setting-group"><label for="timer-duration-hours">Часы:</label><input type="number" id="timer-duration-hours" class="number-input" value="1" min="0" max="23"></div><div class="setting-group"><label for="timer-duration-minutes">Минуты:</label><input type="number" id="timer-duration-minutes" class="number-input" value="0" min="0" max="59"></div><div class="setting-group"><label for="timer-duration-seconds">Секунды:</label><input type="number" id="timer-duration-seconds" class="number-input" value="0" min="0" max="59"></div></div></div></fieldset><fieldset><legend>3. Настройки классов</legend><div class="settings-column"><div class="setting-group"><label for="timer-display-class">CSS-класс элемента таймера<span class="required-indicator">*</span></label><input id="timer-display-class" class="text-input" placeholder="Например: timer-text" required><div class="helper-text">Класс элемента (например, текстового блока), где будут отображаться цифры Д:Ч:М:С.</div></div><div class="setting-group"><label for="timer-hide-classes">CSS-классы блоков для СКРЫТИЯ</label><input id="timer-hide-classes" class="text-input" placeholder="Например: offer-block, old-price"><div class="helper-text">Классы блоков, которые нужно скрыть по окончании таймера. Оставьте пустым, если ничего скрывать не нужно.</div></div><div class="setting-group"><label for="timer-show-classes">CSS-классы блоков для ПОКАЗА (опционально)</label><input id="timer-show-classes" class="text-input" placeholder="Например: expired-message, subscribe-form"><div class="helper-text">Классы блоков, которые нужно показать по окончании таймера.<strong>Важно!</strong>Блокам в Taptop нужно присвоить отдельный класс и через панель стилей установить<code>Отображение: Скрыть элемент<span class="icon-eye-off"></span></code>.</div></div></div></fieldset><fieldset><legend>4. Дополнительные опции по завершении</legend><div class="settings-column"><div class="setting-group"><label class="checkbox-container"><input type="checkbox" id="timer-hide-self"><span class="checkbox-option-label">Скрыть элемент таймера</span></label><div class="helper-text">Скрывает элемент, в котором отображаются цифры таймера, когда отсчет дойдет до нуля.</div></div><div class="setting-group"><label for="timer-completion-text">Текст по завершении (опционально)</label><input id="timer-completion-text" class="text-input" placeholder="Например: Акция завершена!"><div class="helper-text">Этот текст будет показан в элементе таймера вместо "00:00:00".</div></div><div class="setting-group"><label for="timer-redirect-path">Перенаправить на путь (опционально)</label><input id="timer-redirect-path" class="text-input" placeholder="Например: /sale-over или /catalog"><div class="helper-text">Укажите путь на вашем сайте (начинается с /), куда перенаправить пользователя после окончания таймера.</div></div></div></fieldset></div><div class="action-section"><button type="button" class="generate-button" id="generate-btn"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><path d="M16 18l6-6-6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M8 6l-6 6 6 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg><span>Сгенерировать код</span></button></div></form>'}findElements(){this.elements.generateBtn=this.shadowRoot.getElementById("generate-btn"),this.elements.timerTypeRadios=this.shadowRoot.querySelectorAll('input[name="timerType"]'),this.elements.fixedDateSettings=this.shadowRoot.getElementById("fixed-date-settings"),this.elements.evergreenSettings=this.shadowRoot.getElementById("evergreen-settings"),this.elements.endDateInput=this.shadowRoot.getElementById("timer-end-date"),this.elements.endTimeInput=this.shadowRoot.getElementById("timer-end-time"),this.elements.timezoneSelect=this.shadowRoot.getElementById("timer-timezone"),this.elements.durationDaysInput=this.shadowRoot.getElementById("timer-duration-days"),this.elements.durationHoursInput=this.shadowRoot.getElementById("timer-duration-hours"),this.elements.durationMinutesInput=this.shadowRoot.getElementById("timer-duration-minutes"),this.elements.durationSecondsInput=this.shadowRoot.getElementById("timer-duration-seconds"),this.elements.displayClassInput=this.shadowRoot.getElementById("timer-display-class"),this.elements.hideClassesInput=this.shadowRoot.getElementById("timer-hide-classes"),this.elements.showClassesInput=this.shadowRoot.getElementById("timer-show-classes"),this.elements.hideSelfCheckbox=this.shadowRoot.getElementById("timer-hide-self"),this.elements.completionTextInput=this.shadowRoot.getElementById("timer-completion-text"),this.elements.redirectPathInput=this.shadowRoot.getElementById("timer-redirect-path"),this.elements.successPopup=document.querySelector(".pop-up-success"),this.elements.popupAcceptBtn=document.querySelector("[data-popup-accept-btn]"),this.elements.popupCloseBtn=document.querySelector("[data-popup-close-btn]")}bindEvents(){if(this.elements.generateBtn){const e=()=>this.generateAndCopyCode();this.eventHandlers.set("generate",e),this.elements.generateBtn.addEventListener("click",e)}this.elements.timerTypeRadios.forEach(e=>{const t=()=>this.handleTimerTypeChange();this.eventHandlers.set(`timer-type-${e.value}`,t),e.addEventListener("change",t)}),this.bindModalEvents()}bindModalEvents(){if(this.elements.popupAcceptBtn){const e=()=>this.hideSuccessPopup();this.eventHandlers.set("popup-accept",e),this.elements.popupAcceptBtn.addEventListener("click",e)}if(this.elements.popupCloseBtn){const e=()=>this.hideSuccessPopup();this.eventHandlers.set("popup-close",e),this.elements.popupCloseBtn.addEventListener("click",e)}if(this.elements.successPopup){const e=e=>{e.target===this.elements.successPopup&&this.hideSuccessPopup()};this.eventHandlers.set("popup-overlay",e),this.elements.successPopup.addEventListener("click",e)}}setInitialState(){this.elements.endTimeInput.value=this.configDefaults.endTime,this.elements.timezoneSelect.value=this.configDefaults.timezone,this.elements.durationDaysInput.value=this.configDefaults.durationDays,this.elements.durationHoursInput.value=this.configDefaults.durationHours,this.elements.durationMinutesInput.value=this.configDefaults.durationMinutes,this.elements.durationSecondsInput.value=this.configDefaults.durationSeconds,this.handleTimerTypeChange()}handleTimerTypeChange(){const e=this.shadowRoot.querySelector('input[name="timerType"]:checked')?.value||"fixed";this.elements.fixedDateSettings&&this.elements.fixedDateSettings.classList.toggle("hidden","fixed"!==e),this.elements.evergreenSettings&&this.elements.evergreenSettings.classList.toggle("hidden","evergreen"!==e)}collectData(){const e=this.shadowRoot.querySelector('input[name="timerType"]:checked')?.value||"fixed",t=this.elements.displayClassInput?.value.trim()||"",n=this.elements.hideClassesInput?.value||"",i=this.elements.showClassesInput?.value||"",s=this.elements.hideSelfCheckbox?.checked||!1,o=this.elements.completionTextInput?.value.trim()||"",a=this.elements.redirectPathInput?.value.trim()||"";if(!t)return alert("Укажите CSS-класс элемента для отображения таймера."),null;const r=/[.#\s\[\]>+~:()]/;if(r.test(t))return alert(`Класс элемента таймера "${t}" содержит недопустимые символы (пробелы, точки, # и т.д.).`),null;const l=this.parseCommaList(n);if(l.some(e=>r.test(e)))return alert(`Один или несколько классов для скрытия ("${n}") содержат недопустимые символы.`),null;const d=this.parseCommaList(i);if(d.some(e=>r.test(e)))return alert(`Один или несколько классов для показа ("${i}") содержат недопустимые символы.`),null;if(a&&!a.startsWith("/"))return alert(`Путь для перенаправления "${a}" должен начинаться с символа "/".`),null;const p={timerType:e,displayClass:t,hideClasses:l,showClasses:d,completionText:o,redirectPath:a,hideTimerOnEnd:s,storageKey:this.configDefaults.storageKey+t};if("fixed"===e){if(p.endDate=this.elements.endDateInput?.value||"",p.endTime=this.elements.endTimeInput?.value||"00:00:00",p.timezone=this.elements.timezoneSelect?.value||"auto",!p.endDate)return alert("Укажите Дату окончания для фиксированного таймера."),null}else{if(p.durationDays=parseInt(this.elements.durationDaysInput?.value,10)||0,p.durationHours=parseInt(this.elements.durationHoursInput?.value,10)||0,p.durationMinutes=parseInt(this.elements.durationMinutesInput?.value,10)||0,p.durationSeconds=parseInt(this.elements.durationSecondsInput?.value,10)||0,0===p.durationDays&&0===p.durationHours&&0===p.durationMinutes&&0===p.durationSeconds)return alert("Укажите ненулевую длительность для вечнозеленого таймера."),null;if(p.durationDays<0||p.durationHours<0||p.durationMinutes<0||p.durationSeconds<0)return alert("Длительность не может быть отрицательной."),null}return p}async generateAndCopyCode(){const e=this.collectData();if(null===e)return void console.warn("CountdownTimerGenerator: Генерация кода прервана из-за ошибки валидации.");const t=this.generateCode(e),n=await this.minifyGeneratedCode(t);this.copyAndNotify(n)}generateCode(e){const{showDisplayType:t,...n}=e;return`<script>\ndocument.addEventListener('DOMContentLoaded', function() {\nconst config = ${JSON.stringify(n,null,2)};\nconst ONE_SECOND = 1000;\nconst ONE_MINUTE = 60 * ONE_SECOND;\nconst ONE_HOUR = 60 * ONE_MINUTE;\nconst ONE_DAY = 24 * ONE_HOUR;\n\nlet timerDisplayElement = null;\nlet elementsToHide = [];\nlet intervalId = null;\nlet targetTimestamp = 0;\n\nfunction formatTimeLeft(timeLeftMs) {\n  if (timeLeftMs < 0) timeLeftMs = 0;\n  const days = Math.floor(timeLeftMs / ONE_DAY);\n  const hours = Math.floor((timeLeftMs % ONE_DAY) / ONE_HOUR);\n  const minutes = Math.floor((timeLeftMs % ONE_HOUR) / ONE_MINUTE);\n  const seconds = Math.floor((timeLeftMs % ONE_MINUTE) / ONE_SECOND);\n  let output = "";\n  if (days > 0) output += \`\${days.toString()}:\`;\n  output += \`\${hours.toString().padStart(2, '0')}:\`;\n  output += \`\${minutes.toString().padStart(2, '0')}:\`;\n  output += \`\${seconds.toString().padStart(2, '0')}\`;\n  return output;\n}\n\nfunction hideTargetElements() {\n  elementsToHide.forEach(el => {\n    if (el && el.style) {\n      el.style.setProperty('display', 'none', 'important');\n    }\n  });\n}\n\nfunction showTargetElements() {\n    if (!config.showClasses || config.showClasses.length === 0) return;\n\n    const selector = config.showClasses.map(cls => '.' + cls.trim()).join(',');\n    try {\n        const elements = document.querySelectorAll(selector);\n        if (elements.length === 0) return;\n\n        elements.forEach(el => {\n          config.showClasses.forEach(cls => {\n             const className = cls.trim();\n             if (el.classList.contains(className)) {\n               el.classList.remove(className);\n             }\n          });\n        });\n    } catch (e) {}\n}\n\nfunction handleTimerCompletion() {\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    if (!timerDisplayElement) return;\n\n    timerDisplayElement.textContent = config.completionText || formatTimeLeft(0);\n    hideTargetElements();\n    showTargetElements();\n\n    if (config.hideTimerOnEnd && timerDisplayElement.style) {\n        timerDisplayElement.style.setProperty('display', 'none', 'important');\n    }\n\n    if (config.redirectPath && config.redirectPath.startsWith('/')) {\n        window.location.href = window.location.origin + config.redirectPath;\n    }\n}\n\nfunction updateTimerDisplay() {\n  if (!timerDisplayElement) {\n      if(intervalId) clearInterval(intervalId);\n      return;\n  }\n  const now = Date.now();\n  const timeLeft = targetTimestamp - now;\n\n  if (timeLeft <= 0) {\n    handleTimerCompletion();\n    return;\n  }\n  timerDisplayElement.textContent = formatTimeLeft(timeLeft);\n}\n\nfunction calculateFixedTargetTime() {\n   if (!config.endDate || !config.endTime) return 0;\n   \n    const localEndTimeString = config.endDate + 'T' + config.endTime;\n    const localEndDate = new Date(localEndTimeString);\n\n    if (isNaN(localEndDate.getTime())) return 0;\n\n    if (config.timezone === 'auto') {\n      return localEndDate.getTime();\n    } else {\n      try {\n        const targetOffsetMinutes = parseFloat(config.timezone) * 60;\n        if (isNaN(targetOffsetMinutes)) return 0;\n        \n        const year = localEndDate.getFullYear();\n        const month = localEndDate.getMonth();\n        const day = localEndDate.getDate();\n        const hours = localEndDate.getHours();\n        const minutes = localEndDate.getMinutes();\n        const seconds = localEndDate.getSeconds();\n        const assumedUtcTime = Date.UTC(year, month, day, hours, minutes, seconds);\n        return assumedUtcTime - (targetOffsetMinutes * 60000);\n      } catch (e) {\n        return localEndDate.getTime() - (localEndDate.getTimezoneOffset() * 60000);\n      }\n    }\n}\n\nfunction calculateOrGetEvergreenTargetTime() {\n      const storageKey = config.storageKey || 'taptopTimerEnd_' + config.displayClass;\n      const now = Date.now();\n      let targetTime = 0;\n\n      try {\n         const storedEndTime = localStorage.getItem(storageKey);\n         const storedEndTimeParsed = storedEndTime ? parseInt(storedEndTime, 10) : NaN;\n\n         if (!isNaN(storedEndTimeParsed)) {\n           targetTime = storedEndTimeParsed;\n         } else {\n           const durationMillis =\n             (config.durationDays * ONE_DAY) +\n             (config.durationHours * ONE_HOUR) +\n             (config.durationMinutes * ONE_MINUTE) +\n             (config.durationSeconds * ONE_SECOND);\n\n           if (durationMillis <= 0) return 0;\n\n           targetTime = now + durationMillis;\n           try {\n              localStorage.setItem(storageKey, targetTime.toString());\n           } catch (e) {}\n         }\n      } catch (e) {\n          const durationMillis =\n             (config.durationDays * ONE_DAY) +\n             (config.durationHours * ONE_HOUR) +\n             (config.durationMinutes * ONE_MINUTE) +\n             (config.durationSeconds * ONE_SECOND);\n          if (durationMillis > 0) {\n              targetTime = now + durationMillis;\n          } else {\n              return 0;\n          }\n      }\n      return targetTime;\n  }\n\nfunction initializeTimer() {\n  timerDisplayElement = document.querySelector('.' + config.displayClass);\n  elementsToHide = config.hideClasses.length > 0\n      ? document.querySelectorAll(config.hideClasses.map(cls => '.' + cls.trim()).join(','))\n      : [];\n\n  if (!timerDisplayElement) return;\n\n  if (config.timerType === 'fixed') {\n    targetTimestamp = calculateFixedTargetTime();\n  } else {\n    targetTimestamp = calculateOrGetEvergreenTargetTime();\n  }\n\n  if (targetTimestamp <= 0) {\n    timerDisplayElement.textContent = formatTimeLeft(0);\n    return;\n  }\n\n  const now = Date.now();\n  if (targetTimestamp <= now) {\n    handleTimerCompletion();\n  } else {\n    updateTimerDisplay();\n    intervalId = setInterval(updateTimerDisplay, ONE_SECOND);\n  }\n}\n\ninitializeTimer();\n\n});\n<\/script>`}async minifyGeneratedCode(e){try{const t=this.parseGeneratedCode(e),n=t.js?this.minifyJS(t.js):"",i=t.html?this.minifyHTML(t.html):"";let s="";return i&&(s+=i),n&&(s+=`<script>${n}<\/script>`),s}catch(t){return console.warn("Минификация генерируемого кода не удалась, используем оригинал:",t),e}}parseGeneratedCode(e){const t={js:"",html:""},n=/<script[^>]*>([\s\S]*?)<\/script>/gi;let i;for(;null!==(i=n.exec(e));)t.js+=i[1];return t.html=e.replace(/<script[^>]*>[\s\S]*?<\/script>/gi,"").trim(),t}minifyHTML(e){return e?e.replace(/<!--[\s\S]*?-->/g,"").replace(/>\s+</g,"><").replace(/\s+/g," ").trim():""}minifyJS(e){let t=e;return t=this.removeJSComments(t),t=t.replace(/const\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s*=\s*/g,"const $1=").replace(/let\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s*=\s*/g,"let $1=").replace(/var\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s*=\s*/g,"var $1="),t=t.replace(/{\s*([^}]+)\s*}/g,(e,t)=>`{${t.replace(/\s*:\s*/g,":").replace(/\s*,\s*/g,",")}}`).replace(/\[\s*([^\]]+)\s*\]/g,(e,t)=>`[${t.replace(/\s*,\s*/g,",")}]`),t=t.replace(/\s*([=+\-*/%<>&|!])\s*/g,"$1").replace(/\s*([(){}[\];,])\s*/g,"$1").replace(/\s+/g," ").replace(/\b(if|for|while|switch|catch|function|return|throw|new|typeof)\s+/g,"$1 ").replace(/\belse\s+/g,"else ").replace(/\s*\n\s*/g,"\n").replace(/\n+/g,"\n").trim(),t=t.replace(/\btrue\b(?=\s*[,;\}\)\]])/g,"!0").replace(/\bfalse\b(?=\s*[,;\}\)\]])/g,"!1").replace(/\bundefined\b(?=\s*[,;\}\)\]])/g,"void 0"),t}removeJSComments(e){let t="",n=!1,i="",s=!1,o=!1;for(let a=0;a<e.length;a++){const r=e[a],l=e[a+1]||"";if(!s&&!o){if(!(n||'"'!==r&&"'"!==r&&"`"!==r)){n=!0,i=r,t+=r;continue}if(n&&r===i&&"\\"!==e[a-1]){n=!1,t+=r;continue}if(n){t+=r;continue}}if(!n){if(!s&&!o&&"/"===r&&"*"===l){s=!0,a++;continue}if(s&&"*"===r&&"/"===l){s=!1,a++;continue}if(!s&&!o&&"/"===r&&"/"===l){o=!0,a++;continue}if(o&&("\n"===r||"\r"===r)){o=!1,t+=r;continue}}s||o||(t+=r)}return t}async copyAndNotify(e){try{await this.copyToClipboard(e),this.showSuccessPopup()}catch(e){console.error("Ошибка при копировании кода:",e),alert("Произошла ошибка при копировании кода. Попробуйте еще раз.")}}async copyToClipboard(e){try{await navigator.clipboard.writeText(e),console.log("Код скопирован в буфер обмена")}catch(t){this.fallbackCopy(e)}}fallbackCopy(e){const t=document.createElement("textarea");t.value=e,t.style.position="fixed",t.style.left="-9999px",document.body.appendChild(t),t.select(),document.body.removeChild(t)}showSuccessPopup(){this.elements.successPopup&&(this.elements.successPopup.style.display="flex")}hideSuccessPopup(){this.elements.successPopup&&(this.elements.successPopup.style.display="none")}unbindEvents(){this.elements.generateBtn&&this.eventHandlers.has("generate")&&this.elements.generateBtn.removeEventListener("click",this.eventHandlers.get("generate")),this.elements.timerTypeRadios?.forEach(e=>{const t=`timer-type-${e.value}`;this.eventHandlers.has(t)&&e.removeEventListener("change",this.eventHandlers.get(t))}),this.unbindModalEvents(),this.eventHandlers.clear()}unbindModalEvents(){this.elements.popupAcceptBtn&&this.eventHandlers.has("popup-accept")&&this.elements.popupAcceptBtn.removeEventListener("click",this.eventHandlers.get("popup-accept")),this.elements.popupCloseBtn&&this.eventHandlers.has("popup-close")&&this.elements.popupCloseBtn.removeEventListener("click",this.eventHandlers.get("popup-close")),this.elements.successPopup&&this.eventHandlers.has("popup-overlay")&&this.elements.successPopup.removeEventListener("click",this.eventHandlers.get("popup-overlay"))}destroy(){this.unbindEvents(),this.initialized=!1}}customElements.define("countdown-timer-generator",CountdownTimerGenerator);
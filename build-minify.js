#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { minify } = require('terser');
const { minify: minifyHTML } = require('html-minifier-terser');
const cssnano = require('cssnano');
const postcss = require('postcss');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Terser
const terserConfig = require('./terser.config.js');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const COMPONENTS_DIR = './web-components';
const OUTPUT_SUFFIX = '.min';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è HTML –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
const htmlMinifierConfig = {
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: true,
  collapseWhitespace: true,
  conservativeCollapse: false,
  decodeEntities: true,
  html5: true,
  includeAutoGeneratedTags: false,
  keepClosingSlash: false,
  minifyCSS: false, // –ú—ã –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º CSS –æ—Ç–¥–µ–ª—å–Ω–æ
  minifyJS: false,  // –ù–µ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º JS –≤–Ω—É—Ç—Ä–∏ HTML
  preserveLineBreaks: false,
  preventAttributesEscaping: false,
  processConditionalComments: false,
  removeAttributeQuotes: false, // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  removeComments: true,
  removeEmptyAttributes: true,
  removeEmptyElements: false, // –ù–µ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–∂–Ω—ã)
  removeOptionalTags: false,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  removeTagWhitespace: false,
  sortAttributes: false,
  sortClassName: false,
  trimCustomFragments: true,
  useShortDoctype: true
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CSS –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
const cssMinifierConfig = {
  preset: ['default', {
    discardComments: { removeAll: true },
    discardDuplicates: true,
    discardEmpty: true,
    discardOverridden: true,
    discardUnused: false, // –ù–µ —É–¥–∞–ª—è–µ–º CSS, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    mergeLonghand: true,
    mergeRules: true,
    minifyFontValues: true,
    minifyGradients: true,
    minifySelectors: true,
    normalizeCharset: true,
    normalizeDisplayValues: true,
    normalizePositions: true,
    normalizeRepeatStyle: true,
    normalizeString: true,
    normalizeTimingFunctions: true,
    normalizeUnicode: true,
    normalizeUrl: true,
    normalizeWhitespace: true,
    reduceIdents: false, // –ù–µ –∏–∑–º–µ–Ω—è–µ–º CSS –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    reduceInitial: true,
    reduceTransforms: true,
    uniqueSelectors: true,
    zindex: false // –ù–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º z-index
  }]
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
function formatBytes(bytes, decimals = 2) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–µ–ø–µ–Ω–∏ —Å–∂–∞—Ç–∏—è
function getCompressionRatio(originalSize, minifiedSize) {
  const ratio = ((originalSize - minifiedSize) / originalSize) * 100;
  return Math.round(ratio * 100) / 100;
}

// –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è CSS —Å—Ç—Ä–æ–∫–∏
async function minifyCSSString(cssString) {
  try {
    const result = await postcss([cssnano(cssMinifierConfig)])
      .process(cssString, { from: undefined });
    return result.css;
  } catch (error) {
    console.warn('‚ö†Ô∏è  CSS –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª:', error.message);
    return cssString;
  }
}

// –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è HTML —Å—Ç—Ä–æ–∫–∏
async function minifyHTMLString(htmlString) {
  try {
    return await minifyHTML(htmlString, htmlMinifierConfig);
  } catch (error) {
    console.warn('‚ö†Ô∏è  HTML –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª:', error.message);
    return htmlString;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ JavaScript –∫–æ–¥–∞ –¥–ª—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö CSS –∏ HTML
async function preprocessJavaScript(code) {
  let processedCode = code;
  let cssMinificationSavings = 0;
  let htmlMinificationSavings = 0;

  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ getStyles() –º–µ—Ç–æ–¥–∞
  const getStylesRegex = /getStyles\(\)\s*{\s*return\s*`([^`]+)`\s*;?\s*}/gs;
  const getStylesMatches = [...code.matchAll(getStylesRegex)];

  for (const match of getStylesMatches) {
    const originalCSS = match[1];
    const originalSize = Buffer.byteLength(originalCSS, 'utf8');
    
    // –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º CSS
    const minifiedCSS = await minifyCSSString(originalCSS);
    const minifiedSize = Buffer.byteLength(minifiedCSS, 'utf8');
    
    cssMinificationSavings += originalSize - minifiedSize;
    
    // –ó–∞–º–µ–Ω—è–µ–º –≤ –∫–æ–¥–µ
    const newMethod = match[0].replace(originalCSS, minifiedCSS);
    processedCode = processedCode.replace(match[0], newMethod);
  }

  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ getTemplate() –º–µ—Ç–æ–¥–∞
  const getTemplateRegex = /getTemplate\(\)\s*{\s*return\s*`([^`]+)`\s*;?\s*}/gs;
  const getTemplateMatches = [...code.matchAll(getTemplateRegex)];

  for (const match of getTemplateMatches) {
    const originalHTML = match[1];
    const originalSize = Buffer.byteLength(originalHTML, 'utf8');
    
    // –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º HTML
    const minifiedHTML = await minifyHTMLString(originalHTML);
    const minifiedSize = Buffer.byteLength(minifiedHTML, 'utf8');
    
    htmlMinificationSavings += originalSize - minifiedSize;
    
    // –ó–∞–º–µ–Ω—è–µ–º –≤ –∫–æ–¥–µ
    const newMethod = match[0].replace(originalHTML, minifiedHTML);
    processedCode = processedCode.replace(match[0], newMethod);
  }

  return {
    code: processedCode,
    cssMinificationSavings,
    htmlMinificationSavings
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö .js —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –≤–µ–±-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function getComponentFiles() {
  if (!fs.existsSync(COMPONENTS_DIR)) {
    console.error(`‚ùå –ü–∞–ø–∫–∞ ${COMPONENTS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
    process.exit(1);
  }

  const files = fs.readdirSync(COMPONENTS_DIR)
    .filter(file => file.endsWith('.js') && !file.endsWith('.min.js'))
    .map(file => path.join(COMPONENTS_DIR, file));

  if (files.length === 0) {
    console.error(`‚ùå –í –ø–∞–ø–∫–µ ${COMPONENTS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .js —Ñ–∞–π–ª–æ–≤!`);
    process.exit(1);
  }

  return files;
}

// –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
async function minifyFile(inputPath) {
  try {
    console.log(`üîÑ –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è: ${path.basename(inputPath)}`);
    
    // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    const originalCode = fs.readFileSync(inputPath, 'utf8');
    const originalSize = Buffer.byteLength(originalCode, 'utf8');
    
    // –®–∞–≥ 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CSS –∏ HTML
    console.log(`   üìù –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è CSS –∏ HTML...`);
    const preprocessed = await preprocessJavaScript(originalCode);
    const preprocessedSize = Buffer.byteLength(preprocessed.code, 'utf8');
    
    // –®–∞–≥ 2: –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è JavaScript —Å –ø–æ–º–æ—â—å—é Terser
    console.log(`   üóúÔ∏è  –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è JavaScript...`);
    const result = await minify(preprocessed.code, terserConfig);
    
    if (result.error) {
      throw new Error(result.error);
    }
    
    const minifiedCode = result.code;
    const minifiedSize = Buffer.byteLength(minifiedCode, 'utf8');
    
    // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    const ext = path.extname(inputPath);
    const baseName = path.basename(inputPath, ext);
    const outputPath = path.join(
      path.dirname(inputPath), 
      `${baseName}${OUTPUT_SUFFIX}${ext}`
    );
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(outputPath, minifiedCode, 'utf8');
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const compressionRatio = getCompressionRatio(originalSize, minifiedSize);
    const preprocessSavings = originalSize - preprocessedSize;
    const terserSavings = preprocessedSize - minifiedSize;
    
    const stats = {
      inputPath,
      outputPath,
      originalSize,
      minifiedSize,
      compressionRatio,
      cssMinificationSavings: preprocessed.cssMinificationSavings,
      htmlMinificationSavings: preprocessed.htmlMinificationSavings,
      preprocessSavings,
      terserSavings,
      success: true
    };
    
    console.log(`‚úÖ ${path.basename(inputPath)}: ${formatBytes(originalSize)} ‚Üí ${formatBytes(minifiedSize)} (${compressionRatio}% —Å–∂–∞—Ç–∏–µ)`);
    if (preprocessed.cssMinificationSavings > 0) {
      console.log(`   üé® CSS: ${formatBytes(preprocessed.cssMinificationSavings)} —ç–∫–æ–Ω–æ–º–∏–∏`);
    }
    if (preprocessed.htmlMinificationSavings > 0) {
      console.log(`   üìÑ HTML: ${formatBytes(preprocessed.htmlMinificationSavings)} —ç–∫–æ–Ω–æ–º–∏–∏`);
    }
    
    return stats;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ ${path.basename(inputPath)}:`, error.message);
    return {
      inputPath,
      outputPath: null,
      originalSize: 0,
      minifiedSize: 0,
      compressionRatio: 0,
      success: false,
      error: error.message
    };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
async function minifyAllComponents() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é –≤–µ–±-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...\n');
  
  const componentFiles = getComponentFiles();
  const results = [];
  
  // –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  for (const file of componentFiles) {
    const result = await minifyFile(file);
    results.push(result);
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  generateReport(results);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
function generateReport(results) {
  console.log('\nüìä –û–¢–ß–ï–¢ –û –ú–ò–ù–ò–§–ò–ö–ê–¶–ò–ò');
  console.log('='.repeat(80));
  
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);
  
  if (successful.length > 0) {
    console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${successful.length} —Ñ–∞–π–ª–æ–≤\n`);
    
    let totalOriginalSize = 0;
    let totalMinifiedSize = 0;
    let totalCSSMinificationSavings = 0;
    let totalHTMLMinificationSavings = 0;
    
    successful.forEach(result => {
      const fileName = path.basename(result.inputPath);
      const minFileName = path.basename(result.outputPath);
      
      console.log(`   ${fileName}`);
      console.log(`   ‚Üí ${minFileName}`);
      console.log(`   üìè ${formatBytes(result.originalSize)} ‚Üí ${formatBytes(result.minifiedSize)} (${result.compressionRatio}% —Å–∂–∞—Ç–∏–µ)`);
      
      if (result.cssMinificationSavings > 0) {
        console.log(`   üé® CSS: ${formatBytes(result.cssMinificationSavings)} —ç–∫–æ–Ω–æ–º–∏–∏`);
      }
      if (result.htmlMinificationSavings > 0) {
        console.log(`   üìÑ HTML: ${formatBytes(result.htmlMinificationSavings)} —ç–∫–æ–Ω–æ–º–∏–∏`);
      }
      console.log('');
      
      totalOriginalSize += result.originalSize;
      totalMinifiedSize += result.minifiedSize;
      totalCSSMinificationSavings += result.cssMinificationSavings || 0;
      totalHTMLMinificationSavings += result.htmlMinificationSavings || 0;
    });
    
    const totalCompressionRatio = getCompressionRatio(totalOriginalSize, totalMinifiedSize);
    
    console.log('üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä:      ${formatBytes(totalOriginalSize)}`);
    console.log(`   –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π:     ${formatBytes(totalMinifiedSize)}`);
    console.log(`   –û–±—â–µ–µ —Å–∂–∞—Ç–∏–µ:         ${totalCompressionRatio}%`);
    console.log(`   –≠–∫–æ–Ω–æ–º–∏—è:             ${formatBytes(totalOriginalSize - totalMinifiedSize)}`);
    
    if (totalCSSMinificationSavings > 0 || totalHTMLMinificationSavings > 0) {
      console.log('\nüéØ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –¢–ò–ü–ê–ú:');
      if (totalCSSMinificationSavings > 0) {
        console.log(`   üé® CSS –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è:   ${formatBytes(totalCSSMinificationSavings)} —ç–∫–æ–Ω–æ–º–∏–∏`);
      }
      if (totalHTMLMinificationSavings > 0) {
        console.log(`   üìÑ HTML –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è:  ${formatBytes(totalHTMLMinificationSavings)} —ç–∫–æ–Ω–æ–º–∏–∏`);
      }
      const jsMinificationSavings = (totalOriginalSize - totalMinifiedSize) - totalCSSMinificationSavings - totalHTMLMinificationSavings;
      console.log(`   üóúÔ∏è  JS –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è:    ${formatBytes(jsMinificationSavings)} —ç–∫–æ–Ω–æ–º–∏–∏`);
    }
  }
  
  if (failed.length > 0) {
    console.log(`\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å: ${failed.length} —Ñ–∞–π–ª–æ–≤\n`);
    failed.forEach(result => {
      console.log(`   ${path.basename(result.inputPath)}: ${result.error}`);
    });
  }
  
  console.log('\nüèÅ –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤ JSON
  const reportPath = './minification-report.json';
  const totalOriginalSize = successful.reduce((sum, r) => sum + r.originalSize, 0);
  const totalMinifiedSize = successful.reduce((sum, r) => sum + r.minifiedSize, 0);
  const totalCSSMinificationSavings = successful.reduce((sum, r) => sum + (r.cssMinificationSavings || 0), 0);
  const totalHTMLMinificationSavings = successful.reduce((sum, r) => sum + (r.htmlMinificationSavings || 0), 0);
  
  fs.writeFileSync(reportPath, JSON.stringify({
    timestamp: new Date().toISOString(),
    results,
    summary: {
      total: results.length,
      successful: successful.length,
      failed: failed.length,
      totalOriginalSize,
      totalMinifiedSize,
      totalCompressionRatio: getCompressionRatio(totalOriginalSize, totalMinifiedSize),
      totalCSSMinificationSavings,
      totalHTMLMinificationSavings,
      totalJSMinificationSavings: (totalOriginalSize - totalMinifiedSize) - totalCSSMinificationSavings - totalHTMLMinificationSavings
    }
  }, null, 2));
  
  console.log(`üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
async function minifySingleFile(fileName) {
  const filePath = path.join(COMPONENTS_DIR, fileName);
  
  if (!fs.existsSync(filePath)) {
    console.error(`‚ùå –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    process.exit(1);
  }
  
  console.log(`üß™ –¢–µ—Å—Ç–æ–≤–∞—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–∞: ${fileName}\n`);
  
  const result = await minifyFile(filePath);
  generateReport([result]);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.length > 0) {
  // –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const fileName = args[0];
  minifySingleFile(fileName);
} else {
  // –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  minifyAllComponents();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason);
  process.exit(1);
});